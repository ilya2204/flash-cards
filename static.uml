@startuml
class Card {
   input: String
   output: String
   getSolutions(): List<Solution>
}

class DbCardLibrary {
   getActiveCards(): List<Card>
   create(input: String, output: String): Card
   update(id: Integer, input: String, output: String): Card
   delete(id: Integer)
   get(id: Integer): Card

}

interface CardLibrary {
   getActiveCards(): List<Card>
   create(input: String, output: String): Card
   update(id: Integer, input: String, output: String): Card
   delete(id: Integer)
   get(id: Integer): Card

}

 DbCardLibrary ..|> CardLibrary

class Solution {
   time: DateTime
   card: Card
   result: String
}

interface SolutionLibrary {
   create(input: String, card: Card): Solution
   getCardSolutions(card: Card): List<Solution>
   getSessionCardSolutions(card: Card): List<Solution>
}

class DbSolutionLibrary {
   create(input: String, card: Card): Solution
   getCardSolutions(card: Card): List<Solution>
   getSessionCardSolutions(card: Card): List<Solution>
}

DbSolutionLibrary ..|> SolutionLibrary

interface CardPicker {
   getCard(): Card
}

class SpacedRepetitionCardPicker {
   getCard(): Card
}

interface SolutionReportGenerator {
   generateReport(card: Card, input: String): String
}

class IsOkReportGenerator {
   generateReport(card: Card, input: String): String
}

class InputHandler {
   reportGenerator: SolutionReportGenerator
   handleInput(card: Card, input: String): String
}


interface Callable {
call(): Integer
}

class ConsoleWorker {
handler: InputHandler
picker: CardPicker
call(): Integer

}


Callable <|.. ConsoleWorker

CardPicker <|.. SpacedRepetitionCardPicker

Card"1" o-- "*" Solution

Card --> CardPicker
Card --> CardLibrary
Card --> InputHandler
Card --> SolutionLibrary
Card --> SolutionReportGenerator
Solution --> SolutionLibrary
IsOkReportGenerator ..|> SolutionReportGenerator
SolutionReportGenerator --> InputHandler
 InputHandler --> ConsoleWorker 
 CardPicker --> ConsoleWorker 




Solution <-- Card
@enduml
